version: 0.5.{build}

branches:
  only:
    - main

skip_branch_with_pr: true

cache: Build/site_toolsconfig.py

deploy: off

image:
  - macOS-Monterey
  # TODO Support Visual Studio 2022 (msvs_170:win32)
  # - Visual Studio 2022
  - Visual Studio 2019
  - Ubuntu2004
  - Visual Studio 2017
  - Ubuntu1604
  - Visual Studio 2015

platform:
  - x64
  - x86

configuration:
  - Debug
  - Build

matrix:
  exclude:
    # TODO Are there any 32-bit compilers on the macOS images?
    - image: macOS-Monterey
      platform: x86
    # TODO Are there any 32-bit compilers on the Ubuntu images?
    - image: Ubuntu2004
      platform: x86
    - image: Ubuntu1604
      platform: x86

# Ideally, each compiler is listed once, against the most-recent image that includes it.
for:
  - matrix:
      only:
        - image: macOS-Monterey
    environment:
       YP_COMPILER_OSES: gcc_8:darwin gcc_7:darwin gcc_6:darwin
  - matrix:
      only:
        - image: Visual Studio 2022
    # TODO The docs say gcc_5:win32 is available, but it's not...
    environment:
       YP_COMPILER_OSES:
  - matrix:
      only:
        - image: Visual Studio 2019
    environment:
      # TODO Support Visual Studio 2019 (msvs_160:win32)
      YP_COMPILER_OSES: gcc_9:win32 gcc_8:win32
      # TODO Figure out why gcc_9:win32:amd64 isn't available
      YP_SKIP_TARGETS: gcc_9:win32:amd64
  - matrix:
      only:
        - image: Ubuntu2004
    environment:
      YP_COMPILER_OSES: gcc_9:posix gcc_8:posix gcc_7:posix
  - matrix:
      only:
        - image: Visual Studio 2017
    environment:
      # TODO Support Visual Studio 2017 (msvs_150:win32)
      YP_COMPILER_OSES: gcc_7:win32 msvs_140:win32
      # TODO Figure out why gcc_7:win32:x86 isn't available
      YP_SKIP_TARGETS: gcc_7:win32:x86
  - matrix:
      only:
        - image: Ubuntu1604
    environment:
      # TODO Figure out why gcc_6:posix isn't available
      YP_COMPILER_OSES: gcc_5:posix
  - matrix:
      only:
        - image: Visual Studio 2015
    environment:
      YP_COMPILER_OSES: gcc_6:win32 gcc_5:win32 msvs_120:win32 msvs_110:win32 msvs_100:win32 msvs_90:win32
      # TODO Figure out why gcc_5:win32:amd64 isn't available
      YP_SKIP_TARGETS: gcc_5:win32:amd64 msvs_100:win32:amd64 msvs_90:win32:amd64

init:
  # Use this to refresh the cache; see https://www.appveyor.com/docs/build-cache.
  # - pwsh: $env:APPVEYOR_CACHE_SKIP_RESTORE = "true"

install:
  # Write out a Build/.appveyor.ps1 file containing common configurations.
  - pwsh: |
      echo @'
      $YP_ACTION = $args[0] # build, test, analyze, ...
      if (! $YP_ACTION) { throw "missing 'action' argument to Build/.appveyor.ps1" }
      if (! $env:YP_COMPILER_OSES) { throw "YP_COMPILER_OSES not set" }
      $YP_COMPILER_OSES = -split $env:YP_COMPILER_OSES
      $YP_SKIP_TARGETS = -split $env:YP_SKIP_TARGETS
      switch ($env:PLATFORM) {
        "x64" { $YP_ARCH = "amd64" }
        "x86" { $YP_ARCH = "x86" }
        default { throw "unknown platform $($env:PLATFORM)" }
      }
      switch ($env:CONFIGURATION) {
        "Debug" { $YP_CONFIGURATION = "debug" }
        "Build" { $YP_CONFIGURATION = "release" }
        default { throw "unknown configuration $($env:CONFIGURATION)" }
      }

      if ($isWindows) { $env:Path = "C:/Python38-x64;$($env:Path)" }
      if ($isLinux) { . $HOME/venv3.8/bin/activate.ps1 }

      $YP_TARGETS = @()
      foreach ($YP_COMPILER_OS in $YP_COMPILER_OSES) {
        $YP_TARGET = "$($YP_ACTION):$($YP_COMPILER_OS):$($YP_ARCH):$($YP_CONFIGURATION)"
        if ("$($YP_COMPILER_OS):$($YP_ARCH)" -in $YP_SKIP_TARGETS) {
          echo "Skipping due to YP_SKIP_TARGETS: $($YP_TARGET)"
          continue
        }
        $YP_TARGETS += "$($YP_TARGET)"
      }

      echo "Targets: $($YP_TARGETS)"
      Build/make $($YP_TARGETS)
      if (! $?) { throw "Build/make returned an error" }
      '@ > Build/.appveyor.ps1

build_script:
  - pwsh: |
      try { Build/.appveyor.ps1 build }
      catch {
        Write-Error $PSItem
        throw "build failed"
      }

test_script:
  - pwsh: |
      try { Build/.appveyor.ps1 test }
      catch {
        7z a tests.log.zip Build/*/*/yp_test.log Build/*/*/munit_test.log
        appveyor PushArtifact tests.log.zip
        Write-Error $PSItem
        throw "tests failed"
      }
