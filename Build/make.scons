import os
import os.path
import traceback

import SCons.Defaults
import SCons.Errors
import SCons.Tool
import SCons.Util
from site_scons.build_environments import AddBuildTargets
from site_scons.root_environment import MakeRootEnv, SconscriptLog
from site_scons.utilities import GetImportLibrary, GetProgram, GetSharedLibrary, RGlob

# TODO support scons -h for build options


RootEnv = MakeRootEnv()


# Confirm that SCons' top-level directory, the current directory, _is_ the project top
if not os.path.exists("nohtyP.c"):
    RootEnv.Exit("Run SCons from top project dir (or use Build/make, or scons -C)")


# TODO Scripts to update version numbers in source, build scripts, etc
RootEnv.Replace(NOHTYP_MAJOR=0, NOHTYP_MINOR=5, NOHTYP_PATCH=0)


# Adds nohtyP.dll/libnotyP.so/etc as a target in env
# TODO Combine nohtyP.c and nohtyP.cs into a single DLL
#   https://blogs.msdn.microsoft.com/junfeng/2005/05/19/how-do-i-mix-c-and-c-code-in-a-single-assembly/
def nohtyP_SharedLibrary(env):
    env.PrependUnique(
        CPPPATH=[
            "#",
        ],
        CPPDEFINES=[
            "yp_ENABLE_SHARED",
            "yp_BUILD_CORE",
            "yp_DEBUG_LEVEL=%s" % ("10" if env["CONFIGURATION"] == "debug" else "0"),
        ],
        LIBS=[],
    )
    env.Replace(PDB="$VTOP/nohtyP.pdb")
    return env.SharedLibrary("$VTOP/nohtyP", source="$VTOP/nohtyP.c")


# Builds the munit_test suite against the shared library.
def nohtyP_munit_test_Program_shared(env, sharedLib):
    env.PrependUnique(
        CPPPATH=[
            "#",
            "#/Lib",
            "#/Tools/munit",
        ],
        CPPDEFINES=[
            "yp_ENABLE_SHARED",
            # Assertion failures go to stderr, status updates to MUNIT_OUTPUT_FILE.
            "MUNIT_OUTPUT_FILE=stderr",
            "MUNIT_TEST_NAME_LEN=58",
            "MUNIT_DISABLE_TIMING",
        ],
        LIBS=[
            GetImportLibrary(env, sharedLib),
            # Fixes `libnohtyP.so: undefined reference to `pow'` on Ubuntu 20.04.
            "m" if env["TARGET_OS"] == "posix" else "",
        ],
    )
    env.Replace(
        PDB="$VTOP/munit_test.pdb", CCCOMSTR="Compiling $TARGET", LINKCOMSTR="Linking $TARGET"
    )
    source = [
        "$VTOP/Tools/munit/munit.c",
        # TODO Add ypExample.c to the munit tests.
        RGlob(env, "$VTOP/Lib/munit_test/", "*.c"),
    ]
    return env.Program("$VTOP/munit_test", source=source)


def nohtyP_yp_test(env, sharedLib):
    env.PrependENVPath("PYTHONPATH", "#/Lib")
    env["ENV"]["NOHTYP_LIBRARY"] = GetSharedLibrary(env, sharedLib)
    scripts = ("#/Lib/yp.py", env.Glob("#/Lib/yp_test/*.py"), env.Glob("#/Lib/yp_test/*.txt"))
    testLog = env.Command(
        "$VTOP/yp_test.log", (sharedLib, scripts), "$PYTHON -m yp_test -v > $TARGET"
    )
    env.Clean(sharedLib, testLog)
    return testLog


# Runs the munit_test suite.
def nohtyP_munit_test(env, munit_test):
    munit_target = "$VTOP/munit_test.log"
    env.Replace(MUNIT_TEST=GetProgram(env, munit_test), MUNIT_TARGET=munit_target)

    # Assertion failures and status updates go to stderr (see MUNIT_OUTPUT_FILE above).
    munit_action = "$MUNIT_TEST 2> $MUNIT_TARGET"
    if env.subst("$CONFIGURATION") == "coverage":
        env.Replace(COVDATADIR="$VTOP", COVTESTACTION=munit_action, COVCOMSTR="Analyzing $SOURCE")
        testLogs = env.Coverage(target=("$VTOP/munit_test", munit_target), source=munit_test)
    else:
        testLogs = env.Command(target=munit_target, source=munit_test, action=munit_action)

    env.Clean(munit_test, testLogs)
    return testLogs


def nohtyP_checkapi(env):
    # nohtyP.h contains very few PP conditionals, so not much needs to be set up. Preprocessed
    # only recognizes .c (etc) files so we make a copy with that extension. Use dummy versions
    # of standard headers that work well with pycparser.
    env.PrependUnique(CPPPATH=["#", "#/Include/fake_libc_include"], PDB="", LIBS="")
    headerDotC = env.Command(
        "$VTOP/checkapi/nohtyP_h.c", "$VTOP/nohtyP.h", SCons.Defaults.Copy("$TARGET", "$SOURCE")
    )
    preprocessed = env.Preprocessed("$VTOP/checkapi/nohtyP_h", source=headerDotC)

    # TODO Have checkapi write directly to the file
    scripts = (env.Glob("#/Tools/checkapi/*.py"),)
    checkapiLog = env.Command(
        "$VTOP/checkapi.log",
        (preprocessed, scripts),
        "$PYTHON Tools/checkapi/checkapi.py $SOURCE > $TARGET",
    )
    return checkapiLog


python_3 = SCons.Tool.Tool("python_3")
python_min_38 = SCons.Tool.Tool("python_min_38")  # yp_test requires at least Python 3.8
pclint = SCons.Tool.Tool("pclint")


def MakeCompilerTargets(compilerEnv):
    sharedLib = nohtyP_SharedLibrary(compilerEnv.Clone())

    # checkapi requires Python 3, but so do our build scripts, so this should not raise errors.
    checkapi = nohtyP_checkapi(compilerEnv.Clone(tools=[python_3]))

    # These collect all the build, test, and analysis targets, including:
    #   - the C and C# builds of the nohtyP shared library
    #   - yp_test and ypExamples results
    #   - checkapi.py, PC-lint, expanded compiler warnings
    #   - targets that copy the above to Build/native (why sharedLib is in every one)
    buildTargets = [sharedLib]
    testTargets = [sharedLib]
    analyzeTargets = [sharedLib, checkapi]

    if compilerEnv["IS_NATIVE_TARGET"]:
        # We can only run munit_test on native OS and architectures.
        testTargets.append(
            nohtyP_munit_test(
                compilerEnv.Clone(),
                nohtyP_munit_test_Program_shared(compilerEnv.Clone(), sharedLib),
            )
        )

        # yp_test requires a minimum version of Python.
        try:
            testTargets.append(
                nohtyP_yp_test(
                    compilerEnv.Clone(
                        tools=[
                            python_min_38,
                        ]
                    ),
                    sharedLib,
                )
            )
        except (SCons.Errors.UserError, SCons.Errors.StopError):
            traceback.print_exc(file=SconscriptLog)

    return buildTargets, testTargets, analyzeTargets


AddBuildTargets(RootEnv, MakeCompilerTargets)


# The default for "scons -c" is to clean the entire Build directory; otherwise, the default is to
# build just the native debug and release targets
if RootEnv.GetOption("clean"):
    RootEnv.Default("#Build")
else:
    RootEnv.Default("build")
