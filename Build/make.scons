import os.path, itertools

# Confirm that scons' top-level directory, the current directory, _is_ the project top
if not os.path.exists( "nohtyP.c" ):
    Exit( "Run SCons from top project dir (or use make.bat, or scons -C)" )

# Command-line build variables
vars = Variables( None )

# Generic build environment applicable to all compilers/targets and used internally by SCons
rootEnv = DefaultEnvironment( tools=[], variables=vars )

# Require that only known command-line variables are used
vars_unknown = vars.UnknownVariables( )
if vars_unknown: Exit( "Unknown variables: %r" % vars_unknown.keys( ) )

# Require that construction variable names exist at expansion, then add those allowed to be empty
AllowSubstExceptions( )
rootEnv.Append( CPPFLAGS="", SHCCCOMSTR="", SHLINKCOMSTR="", SHLIBVERSION="", LIBPATH="", PCH="", )

# Put .sconsign.dblite (et al) in Build rather than the top nohtyP directory
rootEnv.SConsignFile( os.path.abspath( "Build/.sconsign" ) )

# For dependencies, first consider timestamps, then MD5 checksums
rootEnv.Decider( "MD5-timestamp" )

# Always use cmd.exe on Windows, regardless of user's shell; ignored on other platforms
rootEnv["ENV"]["COMSPEC"] = "cmd.exe"


# Adds nohtyP.dll/libnotyP.so/etc as a target in env
def nohtyP_SharedLibrary( env ):
    env.PrependUnique(
            CPPPATH=[
                "#",
                ],
            CPPDEFINES=[
                "yp_ENABLE_SHARED",
                "yp_BUILD_CORE",
                "yp_DEBUG_LEVEL=%s" % ("1" if env["CONFIGURATION"] == "debug" else "0"),
                ],
            PDB="$VTOP/nohtyP.pdb", LIBS="",
            )
    return env.SharedLibrary( "$VTOP/nohtyP", source="$VTOP/nohtyP.c" ),


compiler_names = ("msvs_120", "msvs_110", "msvs_100", "msvs_90")
oses = ("win32", )
archs = ("amd64", "x86")
configurations = ("release", "debug") # TODO an analyze configuration

for compiler_name in compiler_names:
    # FIXME does this even speed things up?
    compiler = Tool( compiler_name, toolpath=["Build/Tools", ] )
    if not compiler.exists( rootEnv ): continue

    for os, arch, configuration in itertools.product( oses, archs, configurations ):
        # TODO Support cross-compiling OSes, if possible
        if os != rootEnv["PLATFORM"]: continue
        # Visual Studio only supports Windows
        if compiler_name.startswith( "msvs_" ) and os != "win32": continue

        # Skip compilers that can't be found (TODO unless we want an error in that case?)
        # TODO: This script is slow...I suspect it's a result of cloning so much.  Profile, then fix.
        # TODO: Record compiler version information in the variant directory
        try:
            variantEnv = rootEnv.Clone( tools=[compiler, ], COMPILER=compiler, 
                    TARGET_OS=os, TARGET_ARCH=arch, CONFIGURATION=configuration )
        except Exception: continue

        # TODO Remove the target directory entirely on clean?
        variantEnv["VTOP"] = "#Build/%s/%s_%s_%s" % (compiler_name, os, arch, configuration)

        # Maintain a separate directory for intermediate and target files, but don't copy files
        variantEnv.VariantDir( "$VTOP", "#", duplicate=False )
        # TODO Scripts to update version numbers in source, build scripts, etc
        #variantEnv.AppendUnique( LINKFLAGS=["/VERSION:0.5", ] )

        nohtyP_SharedLibrary( variantEnv.Clone( ) )

# TODO Set up aliases for various targets, a default or native target (for the one build that can
# be tested on this system)
# TODO Create aliases that group all compilers, compiler-versions, compiler-version-targets, etc...



