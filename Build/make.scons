import os.path, itertools

# Confirm that scons' top-level directory, the current directory, _is_ the project top
if not os.path.exists( "nohtyP.c" ):
    Exit( "Run SCons from top project dir (or use make.bat, or scons -C)" )

compilers = ("msvs_110", "msvs_100")
oses = ("win32", )
archs = ("x86_64", "x86")
configurations = ("release", "debug")


# Command-line build variables
vars = Variables( None )

# Generic build environment applicable to all compilers/targets and used internally by SCons
rootEnv = DefaultEnvironment( tools=[], variables=vars )

# Require that only known command-line variables are used
vars_unknown = vars.UnknownVariables( )
if vars_unknown: Exit( "Unknown variables: %r" % vars_unknown.keys( ) )

# Require that construction variable names exist at expansion, then add those allowed to be empty
AllowSubstExceptions( )
rootEnv.Append( CPPFLAGS="", SHCCCOMSTR="", SHLINKCOMSTR="", SHLIBVERSION="", LIBPATH="", PCH="", )

# Put .sconsign.dblite (et al) in Build rather than the top nohtyP directory
rootEnv.SConsignFile( os.path.abspath( "Build/.sconsign" ) )

# For dependencies, first consider timestamps, then MD5 checksums
rootEnv.Decider( "MD5-timestamp" )

# Always use cmd.exe on Windows, regardless of user's shell; ignored on other platforms
rootEnv["ENV"]["COMSPEC"] = "cmd.exe"


# Adds nohtyP.dll/libnotyP.so/etc as a target in env
def nohtyP_SharedLibrary( env ):
    env.PrependUnique(
            CPPPATH=[
                "#",
                ],
            CPPDEFINES=[
                "yp_ENABLE_SHARED",
                "yp_BUILD_CORE",
                "yp_DEBUG_LEVEL=%s" % ("1" if env["CONFIGURATION"] == "debug" else "0"),
                ],
            PDB="", LIBS="",
            )
    return env.SharedLibrary( "$VARIANTDIR/nohtyP", source="$VARIANTDIR/nohtyP.c" ), 

# TODO Create aliases that group all compilers, compiler-versions, compiler-version-targets, etc...
# TODO Programmatically-control the Default() targets via command-line variables
for variant in itertools.product( compilers, oses, archs, configurations ):
    compiler, os, arch, configuration = variant
    # TODO Support cross-compiling OSes, if possible
    if os != rootEnv["PLATFORM"]: continue
    # Visual Studio only supports Windows
    if compiler.startswith( "msvs_" ) and os != "win32": continue

    variantEnv = rootEnv.Clone( tools=[compiler, ], toolpath=["#Build/Tools", ],
            COMPILER=compiler, TARGET_OS=os, TARGET_ARCH=arch, CONFIGURATION=configuration )
    # TODO Skip compilers that can't be found, unless we want an error in that case
    if not variantEnv.WhereIs( "$CC" ): continue
    # TODO Remove the target directory entirely on clean?
    variantEnv["VARIANTDIR"] = "#Build/${COMPILER}/${TARGET_OS}_${TARGET_ARCH}_${CONFIGURATION}"
    # Maintain a separate directory for intermediate and target files, but don't copy source files
    variantEnv.VariantDir( "$VARIANTDIR", "#", duplicate=False )

    nohtyP_SharedLibrary( variantEnv.Clone( ) )

