import os.path

# Confirm that scons' top-level directory, the current directory, _is_ the project top
if not os.path.exists( "nohtyP.c" ):
    Exit( "Run SCons from top project dir (or use make.bat, or scons -C)" )

# Command-line build variables
vars = Variables( None )

# Generic build environment applicable to all compilers/targets
# FIXME SCons 2.3.0 doesn't detect 64-bit systems that only have 32-bit tools installed
env = Environment( variables=vars, TARGET_ARCH="x86" ) # FIXME remove TARGET_ARCH

# Require that only known command-line variables are used
vars_unknown = vars.UnknownVariables( )
if vars_unknown: Exit( "Unknown variables: %r" % vars_unknown.keys( ) )

# Require that construction variable names exist at expansion, then add those allowed to be empty
AllowSubstExceptions( )
env.Append( CPPFLAGS="", SHCCCOMSTR="", SHLINKCOMSTR="", SHLIBVERSION="", LIBPATH="", PCH="", )

# Maintain a separate object file directory, and don't copy source files there
env["OBJDIR"] = "#Build/scons"
env.VariantDir( "$OBJDIR", "#", duplicate=False )

# Put .sconsign.dblite (et al) in Build rather than the top nohtyP directory
env.SConsignFile( os.path.abspath( "Build/.sconsign" ) )

# For dependencies, first consider timestamps, then MD5 checksums
env.Decider( "MD5-timestamp" )

# Always use cmd.exe on Windows, regardless of user's shell; ignored on other platforms
env["ENV"]["COMSPEC"] = "cmd.exe"

# TODO Are we missing command-line defines from the vcxproj file that cl doesn't implicitly add?

# How to build nohtyP.dll
env.PrependUnique(
        CPPPATH=[
            "#",
            "#Lib",
            ],
        CPPDEFINES=[
            "yp_ENABLE_SHARED",
            "yp_BUILD_CORE",
            ],
        PDB="", LIBS="",
        )

env.SharedLibrary( "$OBJDIR/nohtyP", source="$OBJDIR/nohtyP.c" )

